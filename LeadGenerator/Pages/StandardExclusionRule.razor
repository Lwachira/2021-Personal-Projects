@page "/standardexclusionrule"
@using LeadAutomator.Data

@using LeadAutomator.DataLayer

@inject LeadAutomatorService LeadAutoService
@inject IJSRuntime JsRuntime;
@inject Services.AppData AppData;
@inject NavigationManager NavigationManager


<div aria-live="polite" aria-atomic="true" style="position: relative;">
    <div class="toast" style="position: absolute; top: 0; right: 0;">
        <div class="toast-header">
            <strong class="mr-auto text-success">Success</strong>
            <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">
                <span aria-hidden="true">×</span>
            </button>
        </div>
        <div class="toast-body">The Exclusion Rule List has cleared.</div>
    </div>
</div>

<h1>Add Standard Exclusion Rule</h1>
<p>Categories selected here will be <b>Excluded</b> from your result set</p>


<EditForm Model="@rules">
    <div class="container">
        <div class="row row-cols-2">

            <div class="custom-control custom-switch custom-switch-lg">
                <input type="checkbox" class="custom-control-input"
                       @onchange="eventArgs => { AddStandardRule(Constant.Advocate, eventArgs.Value); }"
                       id="customSwitch1" />
                <label class="custom-control-label" for="customSwitch1">Advocates</label>
            </div>


            <div class="custom-control custom-switch custom-switch-lg">
                <input type="checkbox" class="custom-control-input"
                       @onchange="eventArgs => { AddStandardRule(Constant.University, eventArgs.Value); }"
                       id="customSwitch2" />
                <label class="custom-control-label" for="customSwitch2">Universities</label>
            </div>

            <div class="custom-control custom-switch custom-switch-lg">
                <input type="checkbox" class="custom-control-input"
                       @onchange="eventArgs => { AddStandardRule(Constant.Bookshop, eventArgs.Value); }"
                       id="customSwitch3" />
                <label class="custom-control-label" for="customSwitch3">Bookstores/ Bookshops</label>
            </div>
            <div class="custom-control custom-switch custom-switch-lg">
                <input type="checkbox" class="custom-control-input"
                       @onchange="eventArgs => { AddStandardRule(Constant.Student, eventArgs.Value); }"
                       id="customSwitch4" />
                <label class="custom-control-label" for="customSwitch4">Students</label>
            </div>

            <div class="custom-control custom-switch custom-switch-lg">
                <input type="checkbox" class="custom-control-input"
                       @onchange="eventArgs => { AddStandardRule(Constant.KeyAccount, eventArgs.Value); }"
                       id="customSwitch5" />
                <label class="custom-control-label" for="customSwitch5">Key accounts</label>
            </div>

            <div class="custom-control custom-switch custom-switch-lg">
                <input type="checkbox" class="custom-control-input"
                       @onchange="eventArgs => { AddStandardRule(Constant.Juta, eventArgs.Value); }"
                       id="customSwitch6" />
                <label class="custom-control-label" for="customSwitch6">Juta accounts</label>
            </div>

            <div class="custom-control custom-switch custom-switch-lg">
                <input type="checkbox" class="custom-control-input"
                       @onchange="eventArgs => { AddStandardRule(Constant.InternalStaff, eventArgs.Value); }"
                       id="customSwitch7" />
                <label class="custom-control-label" for="customSwitch7">Internal Staff</label>
            </div>


            <div class="custom-control custom-switch custom-switch-lg">
                <input type="checkbox" class="custom-control-input"
                       @onchange="eventArgs => { AddStandardRule(Constant.TrialAccount, eventArgs.Value); }"
                       id="customSwitch8" disabled />
                <label class="custom-control-label" for="customSwitch8">Trial Accounts</label>
            </div>

            <div class="custom-control custom-switch custom-switch-lg">
                <input type="checkbox" class="custom-control-input"
                       @onchange="eventArgs => { AddStandardRule(Constant.Unique, eventArgs.Value); }"
                       id="customSwitch9" />
                <label class="custom-control-label" for="customSwitch9">Bring Only Unique Results</label>
            </div>

            <div class="custom-control custom-switch custom-switch-lg">
                <input type="checkbox" class="custom-control-input"
                       @onchange="eventArgs => { AddStandardRule(Constant.ContactPhoneType, eventArgs.Value); }"
                       id="customSwitch10" />
                <label class="custom-control-label" for="customSwitch10">Exclude Contact with Fax Numbers</label>
            </div>

        </div>


    </div>




    <div class="row mx-md-n5">

        <div class="col px-md-5">
            <div class="input-group">
                <button type="button" id="btnClearISBN" @onclick="ClearExclusionList" class="btn btn-dark btn-lg">Clear Exclusion Rule List</button>
            </div>
        </div>


        <div class="col-auto px-md-5">
            <div class="input-group">
                @if (AppData.ISBNList != null)
                {
                    <button type="button" @onclick="LoadLeads" id="btnSubmitISBN" class="btn btn-dark btn-lg">Generate List</button>
                }
                else
                {
                    <button type="button" id="btnSubmitISBN" class="btn btn-dark btn-lg" disabled> You need to load ISBN</button>
                }
            </div>
        </div>

    </div>
</EditForm>


@if (standardRules.Count() > 0)
{
    <div class="table-responsive pt-5">
        <table class="table table-striped">
            <thead>
                <tr>
                    <td>Condition</td>
                    <td>DataType</td>
                    <td>Value</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in standardRules)
                {
                    <tr>
                        <td>@item.Condition</td>
                        <td>@item.DataType</td>
                        <td>@item.Value</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

}
else
{
    <p></p>
}

@code {
    protected Data.StandardExclusionRule rules = new Data.StandardExclusionRule();
    protected List<ExclusionRule> standardRules = new List<ExclusionRule>();
    protected bool loadSuccess = false;
    protected int excludeCounter = 0;


    private void AddStandardRule(string rules, object isSelectedValue)
    {
        bool isSelected = (bool)isSelectedValue;

        LeadAutoService.AddStandardExclusion(rules, isSelected, standardRules);

    }

    private void LoadLeads()
    {

        AppData.Leads = LeadAutoService.GetLeadGenerationFromDatabase(AppData.ISBNList);

        excludeCounter = LeadAutoService.GenerateStandardReport(standardRules, AppData.Leads);

        if (excludeCounter >= 0)
        {
            NavigationManager.NavigateTo("/leadlist");
        }


    }

    private void ClearExclusionList()
    {
        standardRules = new List<ExclusionRule>();
        rules = new Data.StandardExclusionRule();
        OnInitialized();
        JsRuntime.InvokeAsync<object>("initializeToast");

    }
}
